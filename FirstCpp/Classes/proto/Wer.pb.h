// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Wer.proto

#ifndef PROTOBUF_Wer_2eproto__INCLUDED
#define PROTOBUF_Wer_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_Wer_2eproto();
void protobuf_AssignDesc_Wer_2eproto();
void protobuf_ShutdownFile_Wer_2eproto();

class WerTable;
class Wer;

// ===================================================================

class WerTable : public ::google::protobuf::Message {
 public:
  WerTable();
  virtual ~WerTable();

  WerTable(const WerTable& from);

  inline WerTable& operator=(const WerTable& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const WerTable& default_instance();

  void Swap(WerTable* other);

  // implements Message ----------------------------------------------

  WerTable* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const WerTable& from);
  void MergeFrom(const WerTable& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string tname = 1;
  inline bool has_tname() const;
  inline void clear_tname();
  static const int kTnameFieldNumber = 1;
  inline const ::std::string& tname() const;
  inline void set_tname(const ::std::string& value);
  inline void set_tname(const char* value);
  inline void set_tname(const char* value, size_t size);
  inline ::std::string* mutable_tname();
  inline ::std::string* release_tname();
  inline void set_allocated_tname(::std::string* tname);

  // repeated .Wer tlist = 2;
  inline int tlist_size() const;
  inline void clear_tlist();
  static const int kTlistFieldNumber = 2;
  inline const ::Wer& tlist(int index) const;
  inline ::Wer* mutable_tlist(int index);
  inline ::Wer* add_tlist();
  inline const ::google::protobuf::RepeatedPtrField< ::Wer >&
      tlist() const;
  inline ::google::protobuf::RepeatedPtrField< ::Wer >*
      mutable_tlist();

  // @@protoc_insertion_point(class_scope:WerTable)
 private:
  inline void set_has_tname();
  inline void clear_has_tname();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* tname_;
  ::google::protobuf::RepeatedPtrField< ::Wer > tlist_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_Wer_2eproto();
  friend void protobuf_AssignDesc_Wer_2eproto();
  friend void protobuf_ShutdownFile_Wer_2eproto();

  void InitAsDefaultInstance();
  static WerTable* default_instance_;
};
// -------------------------------------------------------------------

class Wer : public ::google::protobuf::Message {
 public:
  Wer();
  virtual ~Wer();

  Wer(const Wer& from);

  inline Wer& operator=(const Wer& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Wer& default_instance();

  void Swap(Wer* other);

  // implements Message ----------------------------------------------

  Wer* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Wer& from);
  void MergeFrom(const Wer& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::int32 id() const;
  inline void set_id(::google::protobuf::int32 value);

  // optional string name = 2;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 2;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // optional string teampoint = 3;
  inline bool has_teampoint() const;
  inline void clear_teampoint();
  static const int kTeampointFieldNumber = 3;
  inline const ::std::string& teampoint() const;
  inline void set_teampoint(const ::std::string& value);
  inline void set_teampoint(const char* value);
  inline void set_teampoint(const char* value, size_t size);
  inline ::std::string* mutable_teampoint();
  inline ::std::string* release_teampoint();
  inline void set_allocated_teampoint(::std::string* teampoint);

  // optional int32 point = 4;
  inline bool has_point() const;
  inline void clear_point();
  static const int kPointFieldNumber = 4;
  inline ::google::protobuf::int32 point() const;
  inline void set_point(::google::protobuf::int32 value);

  // optional string effect1 = 5;
  inline bool has_effect1() const;
  inline void clear_effect1();
  static const int kEffect1FieldNumber = 5;
  inline const ::std::string& effect1() const;
  inline void set_effect1(const ::std::string& value);
  inline void set_effect1(const char* value);
  inline void set_effect1(const char* value, size_t size);
  inline ::std::string* mutable_effect1();
  inline ::std::string* release_effect1();
  inline void set_allocated_effect1(::std::string* effect1);

  // optional string effect2 = 6;
  inline bool has_effect2() const;
  inline void clear_effect2();
  static const int kEffect2FieldNumber = 6;
  inline const ::std::string& effect2() const;
  inline void set_effect2(const ::std::string& value);
  inline void set_effect2(const char* value);
  inline void set_effect2(const char* value, size_t size);
  inline ::std::string* mutable_effect2();
  inline ::std::string* release_effect2();
  inline void set_allocated_effect2(::std::string* effect2);

  // optional string effect3 = 7;
  inline bool has_effect3() const;
  inline void clear_effect3();
  static const int kEffect3FieldNumber = 7;
  inline const ::std::string& effect3() const;
  inline void set_effect3(const ::std::string& value);
  inline void set_effect3(const char* value);
  inline void set_effect3(const char* value, size_t size);
  inline ::std::string* mutable_effect3();
  inline ::std::string* release_effect3();
  inline void set_allocated_effect3(::std::string* effect3);

  // @@protoc_insertion_point(class_scope:Wer)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_teampoint();
  inline void clear_has_teampoint();
  inline void set_has_point();
  inline void clear_has_point();
  inline void set_has_effect1();
  inline void clear_has_effect1();
  inline void set_has_effect2();
  inline void clear_has_effect2();
  inline void set_has_effect3();
  inline void clear_has_effect3();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* name_;
  ::google::protobuf::int32 id_;
  ::google::protobuf::int32 point_;
  ::std::string* teampoint_;
  ::std::string* effect1_;
  ::std::string* effect2_;
  ::std::string* effect3_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(7 + 31) / 32];

  friend void  protobuf_AddDesc_Wer_2eproto();
  friend void protobuf_AssignDesc_Wer_2eproto();
  friend void protobuf_ShutdownFile_Wer_2eproto();

  void InitAsDefaultInstance();
  static Wer* default_instance_;
};
// ===================================================================


// ===================================================================

// WerTable

// optional string tname = 1;
inline bool WerTable::has_tname() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void WerTable::set_has_tname() {
  _has_bits_[0] |= 0x00000001u;
}
inline void WerTable::clear_has_tname() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void WerTable::clear_tname() {
  if (tname_ != &::google::protobuf::internal::kEmptyString) {
    tname_->clear();
  }
  clear_has_tname();
}
inline const ::std::string& WerTable::tname() const {
  return *tname_;
}
inline void WerTable::set_tname(const ::std::string& value) {
  set_has_tname();
  if (tname_ == &::google::protobuf::internal::kEmptyString) {
    tname_ = new ::std::string;
  }
  tname_->assign(value);
}
inline void WerTable::set_tname(const char* value) {
  set_has_tname();
  if (tname_ == &::google::protobuf::internal::kEmptyString) {
    tname_ = new ::std::string;
  }
  tname_->assign(value);
}
inline void WerTable::set_tname(const char* value, size_t size) {
  set_has_tname();
  if (tname_ == &::google::protobuf::internal::kEmptyString) {
    tname_ = new ::std::string;
  }
  tname_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* WerTable::mutable_tname() {
  set_has_tname();
  if (tname_ == &::google::protobuf::internal::kEmptyString) {
    tname_ = new ::std::string;
  }
  return tname_;
}
inline ::std::string* WerTable::release_tname() {
  clear_has_tname();
  if (tname_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = tname_;
    tname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void WerTable::set_allocated_tname(::std::string* tname) {
  if (tname_ != &::google::protobuf::internal::kEmptyString) {
    delete tname_;
  }
  if (tname) {
    set_has_tname();
    tname_ = tname;
  } else {
    clear_has_tname();
    tname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// repeated .Wer tlist = 2;
inline int WerTable::tlist_size() const {
  return tlist_.size();
}
inline void WerTable::clear_tlist() {
  tlist_.Clear();
}
inline const ::Wer& WerTable::tlist(int index) const {
  return tlist_.Get(index);
}
inline ::Wer* WerTable::mutable_tlist(int index) {
  return tlist_.Mutable(index);
}
inline ::Wer* WerTable::add_tlist() {
  return tlist_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::Wer >&
WerTable::tlist() const {
  return tlist_;
}
inline ::google::protobuf::RepeatedPtrField< ::Wer >*
WerTable::mutable_tlist() {
  return &tlist_;
}

// -------------------------------------------------------------------

// Wer

// optional int32 id = 1;
inline bool Wer::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Wer::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Wer::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Wer::clear_id() {
  id_ = 0;
  clear_has_id();
}
inline ::google::protobuf::int32 Wer::id() const {
  return id_;
}
inline void Wer::set_id(::google::protobuf::int32 value) {
  set_has_id();
  id_ = value;
}

// optional string name = 2;
inline bool Wer::has_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Wer::set_has_name() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Wer::clear_has_name() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Wer::clear_name() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& Wer::name() const {
  return *name_;
}
inline void Wer::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void Wer::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void Wer::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Wer::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  return name_;
}
inline ::std::string* Wer::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Wer::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string teampoint = 3;
inline bool Wer::has_teampoint() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Wer::set_has_teampoint() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Wer::clear_has_teampoint() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Wer::clear_teampoint() {
  if (teampoint_ != &::google::protobuf::internal::kEmptyString) {
    teampoint_->clear();
  }
  clear_has_teampoint();
}
inline const ::std::string& Wer::teampoint() const {
  return *teampoint_;
}
inline void Wer::set_teampoint(const ::std::string& value) {
  set_has_teampoint();
  if (teampoint_ == &::google::protobuf::internal::kEmptyString) {
    teampoint_ = new ::std::string;
  }
  teampoint_->assign(value);
}
inline void Wer::set_teampoint(const char* value) {
  set_has_teampoint();
  if (teampoint_ == &::google::protobuf::internal::kEmptyString) {
    teampoint_ = new ::std::string;
  }
  teampoint_->assign(value);
}
inline void Wer::set_teampoint(const char* value, size_t size) {
  set_has_teampoint();
  if (teampoint_ == &::google::protobuf::internal::kEmptyString) {
    teampoint_ = new ::std::string;
  }
  teampoint_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Wer::mutable_teampoint() {
  set_has_teampoint();
  if (teampoint_ == &::google::protobuf::internal::kEmptyString) {
    teampoint_ = new ::std::string;
  }
  return teampoint_;
}
inline ::std::string* Wer::release_teampoint() {
  clear_has_teampoint();
  if (teampoint_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = teampoint_;
    teampoint_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Wer::set_allocated_teampoint(::std::string* teampoint) {
  if (teampoint_ != &::google::protobuf::internal::kEmptyString) {
    delete teampoint_;
  }
  if (teampoint) {
    set_has_teampoint();
    teampoint_ = teampoint;
  } else {
    clear_has_teampoint();
    teampoint_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional int32 point = 4;
inline bool Wer::has_point() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Wer::set_has_point() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Wer::clear_has_point() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Wer::clear_point() {
  point_ = 0;
  clear_has_point();
}
inline ::google::protobuf::int32 Wer::point() const {
  return point_;
}
inline void Wer::set_point(::google::protobuf::int32 value) {
  set_has_point();
  point_ = value;
}

// optional string effect1 = 5;
inline bool Wer::has_effect1() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void Wer::set_has_effect1() {
  _has_bits_[0] |= 0x00000010u;
}
inline void Wer::clear_has_effect1() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void Wer::clear_effect1() {
  if (effect1_ != &::google::protobuf::internal::kEmptyString) {
    effect1_->clear();
  }
  clear_has_effect1();
}
inline const ::std::string& Wer::effect1() const {
  return *effect1_;
}
inline void Wer::set_effect1(const ::std::string& value) {
  set_has_effect1();
  if (effect1_ == &::google::protobuf::internal::kEmptyString) {
    effect1_ = new ::std::string;
  }
  effect1_->assign(value);
}
inline void Wer::set_effect1(const char* value) {
  set_has_effect1();
  if (effect1_ == &::google::protobuf::internal::kEmptyString) {
    effect1_ = new ::std::string;
  }
  effect1_->assign(value);
}
inline void Wer::set_effect1(const char* value, size_t size) {
  set_has_effect1();
  if (effect1_ == &::google::protobuf::internal::kEmptyString) {
    effect1_ = new ::std::string;
  }
  effect1_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Wer::mutable_effect1() {
  set_has_effect1();
  if (effect1_ == &::google::protobuf::internal::kEmptyString) {
    effect1_ = new ::std::string;
  }
  return effect1_;
}
inline ::std::string* Wer::release_effect1() {
  clear_has_effect1();
  if (effect1_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = effect1_;
    effect1_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Wer::set_allocated_effect1(::std::string* effect1) {
  if (effect1_ != &::google::protobuf::internal::kEmptyString) {
    delete effect1_;
  }
  if (effect1) {
    set_has_effect1();
    effect1_ = effect1;
  } else {
    clear_has_effect1();
    effect1_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string effect2 = 6;
inline bool Wer::has_effect2() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void Wer::set_has_effect2() {
  _has_bits_[0] |= 0x00000020u;
}
inline void Wer::clear_has_effect2() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void Wer::clear_effect2() {
  if (effect2_ != &::google::protobuf::internal::kEmptyString) {
    effect2_->clear();
  }
  clear_has_effect2();
}
inline const ::std::string& Wer::effect2() const {
  return *effect2_;
}
inline void Wer::set_effect2(const ::std::string& value) {
  set_has_effect2();
  if (effect2_ == &::google::protobuf::internal::kEmptyString) {
    effect2_ = new ::std::string;
  }
  effect2_->assign(value);
}
inline void Wer::set_effect2(const char* value) {
  set_has_effect2();
  if (effect2_ == &::google::protobuf::internal::kEmptyString) {
    effect2_ = new ::std::string;
  }
  effect2_->assign(value);
}
inline void Wer::set_effect2(const char* value, size_t size) {
  set_has_effect2();
  if (effect2_ == &::google::protobuf::internal::kEmptyString) {
    effect2_ = new ::std::string;
  }
  effect2_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Wer::mutable_effect2() {
  set_has_effect2();
  if (effect2_ == &::google::protobuf::internal::kEmptyString) {
    effect2_ = new ::std::string;
  }
  return effect2_;
}
inline ::std::string* Wer::release_effect2() {
  clear_has_effect2();
  if (effect2_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = effect2_;
    effect2_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Wer::set_allocated_effect2(::std::string* effect2) {
  if (effect2_ != &::google::protobuf::internal::kEmptyString) {
    delete effect2_;
  }
  if (effect2) {
    set_has_effect2();
    effect2_ = effect2;
  } else {
    clear_has_effect2();
    effect2_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string effect3 = 7;
inline bool Wer::has_effect3() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void Wer::set_has_effect3() {
  _has_bits_[0] |= 0x00000040u;
}
inline void Wer::clear_has_effect3() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void Wer::clear_effect3() {
  if (effect3_ != &::google::protobuf::internal::kEmptyString) {
    effect3_->clear();
  }
  clear_has_effect3();
}
inline const ::std::string& Wer::effect3() const {
  return *effect3_;
}
inline void Wer::set_effect3(const ::std::string& value) {
  set_has_effect3();
  if (effect3_ == &::google::protobuf::internal::kEmptyString) {
    effect3_ = new ::std::string;
  }
  effect3_->assign(value);
}
inline void Wer::set_effect3(const char* value) {
  set_has_effect3();
  if (effect3_ == &::google::protobuf::internal::kEmptyString) {
    effect3_ = new ::std::string;
  }
  effect3_->assign(value);
}
inline void Wer::set_effect3(const char* value, size_t size) {
  set_has_effect3();
  if (effect3_ == &::google::protobuf::internal::kEmptyString) {
    effect3_ = new ::std::string;
  }
  effect3_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Wer::mutable_effect3() {
  set_has_effect3();
  if (effect3_ == &::google::protobuf::internal::kEmptyString) {
    effect3_ = new ::std::string;
  }
  return effect3_;
}
inline ::std::string* Wer::release_effect3() {
  clear_has_effect3();
  if (effect3_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = effect3_;
    effect3_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Wer::set_allocated_effect3(::std::string* effect3) {
  if (effect3_ != &::google::protobuf::internal::kEmptyString) {
    delete effect3_;
  }
  if (effect3) {
    set_has_effect3();
    effect3_ = effect3;
  } else {
    clear_has_effect3();
    effect3_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}


// @@protoc_insertion_point(namespace_scope)

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_Wer_2eproto__INCLUDED
