// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: AvatarAsset.proto

#ifndef PROTOBUF_AvatarAsset_2eproto__INCLUDED
#define PROTOBUF_AvatarAsset_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_AvatarAsset_2eproto();
void protobuf_AssignDesc_AvatarAsset_2eproto();
void protobuf_ShutdownFile_AvatarAsset_2eproto();

class AvatarAssetTable;
class AvatarAsset;

// ===================================================================

class AvatarAssetTable : public ::google::protobuf::Message {
 public:
  AvatarAssetTable();
  virtual ~AvatarAssetTable();

  AvatarAssetTable(const AvatarAssetTable& from);

  inline AvatarAssetTable& operator=(const AvatarAssetTable& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const AvatarAssetTable& default_instance();

  void Swap(AvatarAssetTable* other);

  // implements Message ----------------------------------------------

  AvatarAssetTable* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const AvatarAssetTable& from);
  void MergeFrom(const AvatarAssetTable& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string tname = 1;
  inline bool has_tname() const;
  inline void clear_tname();
  static const int kTnameFieldNumber = 1;
  inline const ::std::string& tname() const;
  inline void set_tname(const ::std::string& value);
  inline void set_tname(const char* value);
  inline void set_tname(const char* value, size_t size);
  inline ::std::string* mutable_tname();
  inline ::std::string* release_tname();
  inline void set_allocated_tname(::std::string* tname);

  // repeated .AvatarAsset tlist = 2;
  inline int tlist_size() const;
  inline void clear_tlist();
  static const int kTlistFieldNumber = 2;
  inline const ::AvatarAsset& tlist(int index) const;
  inline ::AvatarAsset* mutable_tlist(int index);
  inline ::AvatarAsset* add_tlist();
  inline const ::google::protobuf::RepeatedPtrField< ::AvatarAsset >&
      tlist() const;
  inline ::google::protobuf::RepeatedPtrField< ::AvatarAsset >*
      mutable_tlist();

  // @@protoc_insertion_point(class_scope:AvatarAssetTable)
 private:
  inline void set_has_tname();
  inline void clear_has_tname();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* tname_;
  ::google::protobuf::RepeatedPtrField< ::AvatarAsset > tlist_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_AvatarAsset_2eproto();
  friend void protobuf_AssignDesc_AvatarAsset_2eproto();
  friend void protobuf_ShutdownFile_AvatarAsset_2eproto();

  void InitAsDefaultInstance();
  static AvatarAssetTable* default_instance_;
};
// -------------------------------------------------------------------

class AvatarAsset : public ::google::protobuf::Message {
 public:
  AvatarAsset();
  virtual ~AvatarAsset();

  AvatarAsset(const AvatarAsset& from);

  inline AvatarAsset& operator=(const AvatarAsset& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const AvatarAsset& default_instance();

  void Swap(AvatarAsset* other);

  // implements Message ----------------------------------------------

  AvatarAsset* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const AvatarAsset& from);
  void MergeFrom(const AvatarAsset& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::int32 id() const;
  inline void set_id(::google::protobuf::int32 value);

  // optional string aname = 2;
  inline bool has_aname() const;
  inline void clear_aname();
  static const int kAnameFieldNumber = 2;
  inline const ::std::string& aname() const;
  inline void set_aname(const ::std::string& value);
  inline void set_aname(const char* value);
  inline void set_aname(const char* value, size_t size);
  inline ::std::string* mutable_aname();
  inline ::std::string* release_aname();
  inline void set_allocated_aname(::std::string* aname);

  // optional string pngpath = 3;
  inline bool has_pngpath() const;
  inline void clear_pngpath();
  static const int kPngpathFieldNumber = 3;
  inline const ::std::string& pngpath() const;
  inline void set_pngpath(const ::std::string& value);
  inline void set_pngpath(const char* value);
  inline void set_pngpath(const char* value, size_t size);
  inline ::std::string* mutable_pngpath();
  inline ::std::string* release_pngpath();
  inline void set_allocated_pngpath(::std::string* pngpath);

  // optional string xmlpath = 4;
  inline bool has_xmlpath() const;
  inline void clear_xmlpath();
  static const int kXmlpathFieldNumber = 4;
  inline const ::std::string& xmlpath() const;
  inline void set_xmlpath(const ::std::string& value);
  inline void set_xmlpath(const char* value);
  inline void set_xmlpath(const char* value, size_t size);
  inline ::std::string* mutable_xmlpath();
  inline ::std::string* release_xmlpath();
  inline void set_allocated_xmlpath(::std::string* xmlpath);

  // optional string jsonpath = 5;
  inline bool has_jsonpath() const;
  inline void clear_jsonpath();
  static const int kJsonpathFieldNumber = 5;
  inline const ::std::string& jsonpath() const;
  inline void set_jsonpath(const ::std::string& value);
  inline void set_jsonpath(const char* value);
  inline void set_jsonpath(const char* value, size_t size);
  inline ::std::string* mutable_jsonpath();
  inline ::std::string* release_jsonpath();
  inline void set_allocated_jsonpath(::std::string* jsonpath);

  // optional int32 distance = 6;
  inline bool has_distance() const;
  inline void clear_distance();
  static const int kDistanceFieldNumber = 6;
  inline ::google::protobuf::int32 distance() const;
  inline void set_distance(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:AvatarAsset)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_aname();
  inline void clear_has_aname();
  inline void set_has_pngpath();
  inline void clear_has_pngpath();
  inline void set_has_xmlpath();
  inline void clear_has_xmlpath();
  inline void set_has_jsonpath();
  inline void clear_has_jsonpath();
  inline void set_has_distance();
  inline void clear_has_distance();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* aname_;
  ::std::string* pngpath_;
  ::google::protobuf::int32 id_;
  ::google::protobuf::int32 distance_;
  ::std::string* xmlpath_;
  ::std::string* jsonpath_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(6 + 31) / 32];

  friend void  protobuf_AddDesc_AvatarAsset_2eproto();
  friend void protobuf_AssignDesc_AvatarAsset_2eproto();
  friend void protobuf_ShutdownFile_AvatarAsset_2eproto();

  void InitAsDefaultInstance();
  static AvatarAsset* default_instance_;
};
// ===================================================================


// ===================================================================

// AvatarAssetTable

// optional string tname = 1;
inline bool AvatarAssetTable::has_tname() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void AvatarAssetTable::set_has_tname() {
  _has_bits_[0] |= 0x00000001u;
}
inline void AvatarAssetTable::clear_has_tname() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void AvatarAssetTable::clear_tname() {
  if (tname_ != &::google::protobuf::internal::kEmptyString) {
    tname_->clear();
  }
  clear_has_tname();
}
inline const ::std::string& AvatarAssetTable::tname() const {
  return *tname_;
}
inline void AvatarAssetTable::set_tname(const ::std::string& value) {
  set_has_tname();
  if (tname_ == &::google::protobuf::internal::kEmptyString) {
    tname_ = new ::std::string;
  }
  tname_->assign(value);
}
inline void AvatarAssetTable::set_tname(const char* value) {
  set_has_tname();
  if (tname_ == &::google::protobuf::internal::kEmptyString) {
    tname_ = new ::std::string;
  }
  tname_->assign(value);
}
inline void AvatarAssetTable::set_tname(const char* value, size_t size) {
  set_has_tname();
  if (tname_ == &::google::protobuf::internal::kEmptyString) {
    tname_ = new ::std::string;
  }
  tname_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* AvatarAssetTable::mutable_tname() {
  set_has_tname();
  if (tname_ == &::google::protobuf::internal::kEmptyString) {
    tname_ = new ::std::string;
  }
  return tname_;
}
inline ::std::string* AvatarAssetTable::release_tname() {
  clear_has_tname();
  if (tname_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = tname_;
    tname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void AvatarAssetTable::set_allocated_tname(::std::string* tname) {
  if (tname_ != &::google::protobuf::internal::kEmptyString) {
    delete tname_;
  }
  if (tname) {
    set_has_tname();
    tname_ = tname;
  } else {
    clear_has_tname();
    tname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// repeated .AvatarAsset tlist = 2;
inline int AvatarAssetTable::tlist_size() const {
  return tlist_.size();
}
inline void AvatarAssetTable::clear_tlist() {
  tlist_.Clear();
}
inline const ::AvatarAsset& AvatarAssetTable::tlist(int index) const {
  return tlist_.Get(index);
}
inline ::AvatarAsset* AvatarAssetTable::mutable_tlist(int index) {
  return tlist_.Mutable(index);
}
inline ::AvatarAsset* AvatarAssetTable::add_tlist() {
  return tlist_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::AvatarAsset >&
AvatarAssetTable::tlist() const {
  return tlist_;
}
inline ::google::protobuf::RepeatedPtrField< ::AvatarAsset >*
AvatarAssetTable::mutable_tlist() {
  return &tlist_;
}

// -------------------------------------------------------------------

// AvatarAsset

// optional int32 id = 1;
inline bool AvatarAsset::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void AvatarAsset::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void AvatarAsset::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void AvatarAsset::clear_id() {
  id_ = 0;
  clear_has_id();
}
inline ::google::protobuf::int32 AvatarAsset::id() const {
  return id_;
}
inline void AvatarAsset::set_id(::google::protobuf::int32 value) {
  set_has_id();
  id_ = value;
}

// optional string aname = 2;
inline bool AvatarAsset::has_aname() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void AvatarAsset::set_has_aname() {
  _has_bits_[0] |= 0x00000002u;
}
inline void AvatarAsset::clear_has_aname() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void AvatarAsset::clear_aname() {
  if (aname_ != &::google::protobuf::internal::kEmptyString) {
    aname_->clear();
  }
  clear_has_aname();
}
inline const ::std::string& AvatarAsset::aname() const {
  return *aname_;
}
inline void AvatarAsset::set_aname(const ::std::string& value) {
  set_has_aname();
  if (aname_ == &::google::protobuf::internal::kEmptyString) {
    aname_ = new ::std::string;
  }
  aname_->assign(value);
}
inline void AvatarAsset::set_aname(const char* value) {
  set_has_aname();
  if (aname_ == &::google::protobuf::internal::kEmptyString) {
    aname_ = new ::std::string;
  }
  aname_->assign(value);
}
inline void AvatarAsset::set_aname(const char* value, size_t size) {
  set_has_aname();
  if (aname_ == &::google::protobuf::internal::kEmptyString) {
    aname_ = new ::std::string;
  }
  aname_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* AvatarAsset::mutable_aname() {
  set_has_aname();
  if (aname_ == &::google::protobuf::internal::kEmptyString) {
    aname_ = new ::std::string;
  }
  return aname_;
}
inline ::std::string* AvatarAsset::release_aname() {
  clear_has_aname();
  if (aname_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = aname_;
    aname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void AvatarAsset::set_allocated_aname(::std::string* aname) {
  if (aname_ != &::google::protobuf::internal::kEmptyString) {
    delete aname_;
  }
  if (aname) {
    set_has_aname();
    aname_ = aname;
  } else {
    clear_has_aname();
    aname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string pngpath = 3;
inline bool AvatarAsset::has_pngpath() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void AvatarAsset::set_has_pngpath() {
  _has_bits_[0] |= 0x00000004u;
}
inline void AvatarAsset::clear_has_pngpath() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void AvatarAsset::clear_pngpath() {
  if (pngpath_ != &::google::protobuf::internal::kEmptyString) {
    pngpath_->clear();
  }
  clear_has_pngpath();
}
inline const ::std::string& AvatarAsset::pngpath() const {
  return *pngpath_;
}
inline void AvatarAsset::set_pngpath(const ::std::string& value) {
  set_has_pngpath();
  if (pngpath_ == &::google::protobuf::internal::kEmptyString) {
    pngpath_ = new ::std::string;
  }
  pngpath_->assign(value);
}
inline void AvatarAsset::set_pngpath(const char* value) {
  set_has_pngpath();
  if (pngpath_ == &::google::protobuf::internal::kEmptyString) {
    pngpath_ = new ::std::string;
  }
  pngpath_->assign(value);
}
inline void AvatarAsset::set_pngpath(const char* value, size_t size) {
  set_has_pngpath();
  if (pngpath_ == &::google::protobuf::internal::kEmptyString) {
    pngpath_ = new ::std::string;
  }
  pngpath_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* AvatarAsset::mutable_pngpath() {
  set_has_pngpath();
  if (pngpath_ == &::google::protobuf::internal::kEmptyString) {
    pngpath_ = new ::std::string;
  }
  return pngpath_;
}
inline ::std::string* AvatarAsset::release_pngpath() {
  clear_has_pngpath();
  if (pngpath_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = pngpath_;
    pngpath_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void AvatarAsset::set_allocated_pngpath(::std::string* pngpath) {
  if (pngpath_ != &::google::protobuf::internal::kEmptyString) {
    delete pngpath_;
  }
  if (pngpath) {
    set_has_pngpath();
    pngpath_ = pngpath;
  } else {
    clear_has_pngpath();
    pngpath_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string xmlpath = 4;
inline bool AvatarAsset::has_xmlpath() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void AvatarAsset::set_has_xmlpath() {
  _has_bits_[0] |= 0x00000008u;
}
inline void AvatarAsset::clear_has_xmlpath() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void AvatarAsset::clear_xmlpath() {
  if (xmlpath_ != &::google::protobuf::internal::kEmptyString) {
    xmlpath_->clear();
  }
  clear_has_xmlpath();
}
inline const ::std::string& AvatarAsset::xmlpath() const {
  return *xmlpath_;
}
inline void AvatarAsset::set_xmlpath(const ::std::string& value) {
  set_has_xmlpath();
  if (xmlpath_ == &::google::protobuf::internal::kEmptyString) {
    xmlpath_ = new ::std::string;
  }
  xmlpath_->assign(value);
}
inline void AvatarAsset::set_xmlpath(const char* value) {
  set_has_xmlpath();
  if (xmlpath_ == &::google::protobuf::internal::kEmptyString) {
    xmlpath_ = new ::std::string;
  }
  xmlpath_->assign(value);
}
inline void AvatarAsset::set_xmlpath(const char* value, size_t size) {
  set_has_xmlpath();
  if (xmlpath_ == &::google::protobuf::internal::kEmptyString) {
    xmlpath_ = new ::std::string;
  }
  xmlpath_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* AvatarAsset::mutable_xmlpath() {
  set_has_xmlpath();
  if (xmlpath_ == &::google::protobuf::internal::kEmptyString) {
    xmlpath_ = new ::std::string;
  }
  return xmlpath_;
}
inline ::std::string* AvatarAsset::release_xmlpath() {
  clear_has_xmlpath();
  if (xmlpath_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = xmlpath_;
    xmlpath_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void AvatarAsset::set_allocated_xmlpath(::std::string* xmlpath) {
  if (xmlpath_ != &::google::protobuf::internal::kEmptyString) {
    delete xmlpath_;
  }
  if (xmlpath) {
    set_has_xmlpath();
    xmlpath_ = xmlpath;
  } else {
    clear_has_xmlpath();
    xmlpath_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string jsonpath = 5;
inline bool AvatarAsset::has_jsonpath() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void AvatarAsset::set_has_jsonpath() {
  _has_bits_[0] |= 0x00000010u;
}
inline void AvatarAsset::clear_has_jsonpath() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void AvatarAsset::clear_jsonpath() {
  if (jsonpath_ != &::google::protobuf::internal::kEmptyString) {
    jsonpath_->clear();
  }
  clear_has_jsonpath();
}
inline const ::std::string& AvatarAsset::jsonpath() const {
  return *jsonpath_;
}
inline void AvatarAsset::set_jsonpath(const ::std::string& value) {
  set_has_jsonpath();
  if (jsonpath_ == &::google::protobuf::internal::kEmptyString) {
    jsonpath_ = new ::std::string;
  }
  jsonpath_->assign(value);
}
inline void AvatarAsset::set_jsonpath(const char* value) {
  set_has_jsonpath();
  if (jsonpath_ == &::google::protobuf::internal::kEmptyString) {
    jsonpath_ = new ::std::string;
  }
  jsonpath_->assign(value);
}
inline void AvatarAsset::set_jsonpath(const char* value, size_t size) {
  set_has_jsonpath();
  if (jsonpath_ == &::google::protobuf::internal::kEmptyString) {
    jsonpath_ = new ::std::string;
  }
  jsonpath_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* AvatarAsset::mutable_jsonpath() {
  set_has_jsonpath();
  if (jsonpath_ == &::google::protobuf::internal::kEmptyString) {
    jsonpath_ = new ::std::string;
  }
  return jsonpath_;
}
inline ::std::string* AvatarAsset::release_jsonpath() {
  clear_has_jsonpath();
  if (jsonpath_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = jsonpath_;
    jsonpath_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void AvatarAsset::set_allocated_jsonpath(::std::string* jsonpath) {
  if (jsonpath_ != &::google::protobuf::internal::kEmptyString) {
    delete jsonpath_;
  }
  if (jsonpath) {
    set_has_jsonpath();
    jsonpath_ = jsonpath;
  } else {
    clear_has_jsonpath();
    jsonpath_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional int32 distance = 6;
inline bool AvatarAsset::has_distance() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void AvatarAsset::set_has_distance() {
  _has_bits_[0] |= 0x00000020u;
}
inline void AvatarAsset::clear_has_distance() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void AvatarAsset::clear_distance() {
  distance_ = 0;
  clear_has_distance();
}
inline ::google::protobuf::int32 AvatarAsset::distance() const {
  return distance_;
}
inline void AvatarAsset::set_distance(::google::protobuf::int32 value) {
  set_has_distance();
  distance_ = value;
}


// @@protoc_insertion_point(namespace_scope)

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_AvatarAsset_2eproto__INCLUDED
