// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Person.proto

#ifndef PROTOBUF_Person_2eproto__INCLUDED
#define PROTOBUF_Person_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_Person_2eproto();
void protobuf_AssignDesc_Person_2eproto();
void protobuf_ShutdownFile_Person_2eproto();

class Table_Avatar;
class Tile_Avatar;

// ===================================================================

class Table_Avatar : public ::google::protobuf::Message {
 public:
  Table_Avatar();
  virtual ~Table_Avatar();

  Table_Avatar(const Table_Avatar& from);

  inline Table_Avatar& operator=(const Table_Avatar& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Table_Avatar& default_instance();

  void Swap(Table_Avatar* other);

  // implements Message ----------------------------------------------

  Table_Avatar* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Table_Avatar& from);
  void MergeFrom(const Table_Avatar& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string tName = 1;
  inline bool has_tname() const;
  inline void clear_tname();
  static const int kTNameFieldNumber = 1;
  inline const ::std::string& tname() const;
  inline void set_tname(const ::std::string& value);
  inline void set_tname(const char* value);
  inline void set_tname(const char* value, size_t size);
  inline ::std::string* mutable_tname();
  inline ::std::string* release_tname();
  inline void set_allocated_tname(::std::string* tname);

  // repeated .Tile_Avatar tList = 2;
  inline int tlist_size() const;
  inline void clear_tlist();
  static const int kTListFieldNumber = 2;
  inline const ::Tile_Avatar& tlist(int index) const;
  inline ::Tile_Avatar* mutable_tlist(int index);
  inline ::Tile_Avatar* add_tlist();
  inline const ::google::protobuf::RepeatedPtrField< ::Tile_Avatar >&
      tlist() const;
  inline ::google::protobuf::RepeatedPtrField< ::Tile_Avatar >*
      mutable_tlist();

  // @@protoc_insertion_point(class_scope:Table_Avatar)
 private:
  inline void set_has_tname();
  inline void clear_has_tname();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* tname_;
  ::google::protobuf::RepeatedPtrField< ::Tile_Avatar > tlist_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_Person_2eproto();
  friend void protobuf_AssignDesc_Person_2eproto();
  friend void protobuf_ShutdownFile_Person_2eproto();

  void InitAsDefaultInstance();
  static Table_Avatar* default_instance_;
};
// -------------------------------------------------------------------

class Tile_Avatar : public ::google::protobuf::Message {
 public:
  Tile_Avatar();
  virtual ~Tile_Avatar();

  Tile_Avatar(const Tile_Avatar& from);

  inline Tile_Avatar& operator=(const Tile_Avatar& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Tile_Avatar& default_instance();

  void Swap(Tile_Avatar* other);

  // implements Message ----------------------------------------------

  Tile_Avatar* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Tile_Avatar& from);
  void MergeFrom(const Tile_Avatar& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::int32 id() const;
  inline void set_id(::google::protobuf::int32 value);

  // optional string name = 2;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 2;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // optional string email = 3;
  inline bool has_email() const;
  inline void clear_email();
  static const int kEmailFieldNumber = 3;
  inline const ::std::string& email() const;
  inline void set_email(const ::std::string& value);
  inline void set_email(const char* value);
  inline void set_email(const char* value, size_t size);
  inline ::std::string* mutable_email();
  inline ::std::string* release_email();
  inline void set_allocated_email(::std::string* email);

  // @@protoc_insertion_point(class_scope:Tile_Avatar)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_email();
  inline void clear_has_email();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* name_;
  ::std::string* email_;
  ::google::protobuf::int32 id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_Person_2eproto();
  friend void protobuf_AssignDesc_Person_2eproto();
  friend void protobuf_ShutdownFile_Person_2eproto();

  void InitAsDefaultInstance();
  static Tile_Avatar* default_instance_;
};
// ===================================================================


// ===================================================================

// Table_Avatar

// required string tName = 1;
inline bool Table_Avatar::has_tname() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Table_Avatar::set_has_tname() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Table_Avatar::clear_has_tname() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Table_Avatar::clear_tname() {
  if (tname_ != &::google::protobuf::internal::kEmptyString) {
    tname_->clear();
  }
  clear_has_tname();
}
inline const ::std::string& Table_Avatar::tname() const {
  return *tname_;
}
inline void Table_Avatar::set_tname(const ::std::string& value) {
  set_has_tname();
  if (tname_ == &::google::protobuf::internal::kEmptyString) {
    tname_ = new ::std::string;
  }
  tname_->assign(value);
}
inline void Table_Avatar::set_tname(const char* value) {
  set_has_tname();
  if (tname_ == &::google::protobuf::internal::kEmptyString) {
    tname_ = new ::std::string;
  }
  tname_->assign(value);
}
inline void Table_Avatar::set_tname(const char* value, size_t size) {
  set_has_tname();
  if (tname_ == &::google::protobuf::internal::kEmptyString) {
    tname_ = new ::std::string;
  }
  tname_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Table_Avatar::mutable_tname() {
  set_has_tname();
  if (tname_ == &::google::protobuf::internal::kEmptyString) {
    tname_ = new ::std::string;
  }
  return tname_;
}
inline ::std::string* Table_Avatar::release_tname() {
  clear_has_tname();
  if (tname_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = tname_;
    tname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Table_Avatar::set_allocated_tname(::std::string* tname) {
  if (tname_ != &::google::protobuf::internal::kEmptyString) {
    delete tname_;
  }
  if (tname) {
    set_has_tname();
    tname_ = tname;
  } else {
    clear_has_tname();
    tname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// repeated .Tile_Avatar tList = 2;
inline int Table_Avatar::tlist_size() const {
  return tlist_.size();
}
inline void Table_Avatar::clear_tlist() {
  tlist_.Clear();
}
inline const ::Tile_Avatar& Table_Avatar::tlist(int index) const {
  return tlist_.Get(index);
}
inline ::Tile_Avatar* Table_Avatar::mutable_tlist(int index) {
  return tlist_.Mutable(index);
}
inline ::Tile_Avatar* Table_Avatar::add_tlist() {
  return tlist_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::Tile_Avatar >&
Table_Avatar::tlist() const {
  return tlist_;
}
inline ::google::protobuf::RepeatedPtrField< ::Tile_Avatar >*
Table_Avatar::mutable_tlist() {
  return &tlist_;
}

// -------------------------------------------------------------------

// Tile_Avatar

// required int32 id = 1;
inline bool Tile_Avatar::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Tile_Avatar::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Tile_Avatar::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Tile_Avatar::clear_id() {
  id_ = 0;
  clear_has_id();
}
inline ::google::protobuf::int32 Tile_Avatar::id() const {
  return id_;
}
inline void Tile_Avatar::set_id(::google::protobuf::int32 value) {
  set_has_id();
  id_ = value;
}

// optional string name = 2;
inline bool Tile_Avatar::has_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Tile_Avatar::set_has_name() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Tile_Avatar::clear_has_name() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Tile_Avatar::clear_name() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& Tile_Avatar::name() const {
  return *name_;
}
inline void Tile_Avatar::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void Tile_Avatar::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void Tile_Avatar::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Tile_Avatar::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  return name_;
}
inline ::std::string* Tile_Avatar::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Tile_Avatar::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string email = 3;
inline bool Tile_Avatar::has_email() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Tile_Avatar::set_has_email() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Tile_Avatar::clear_has_email() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Tile_Avatar::clear_email() {
  if (email_ != &::google::protobuf::internal::kEmptyString) {
    email_->clear();
  }
  clear_has_email();
}
inline const ::std::string& Tile_Avatar::email() const {
  return *email_;
}
inline void Tile_Avatar::set_email(const ::std::string& value) {
  set_has_email();
  if (email_ == &::google::protobuf::internal::kEmptyString) {
    email_ = new ::std::string;
  }
  email_->assign(value);
}
inline void Tile_Avatar::set_email(const char* value) {
  set_has_email();
  if (email_ == &::google::protobuf::internal::kEmptyString) {
    email_ = new ::std::string;
  }
  email_->assign(value);
}
inline void Tile_Avatar::set_email(const char* value, size_t size) {
  set_has_email();
  if (email_ == &::google::protobuf::internal::kEmptyString) {
    email_ = new ::std::string;
  }
  email_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Tile_Avatar::mutable_email() {
  set_has_email();
  if (email_ == &::google::protobuf::internal::kEmptyString) {
    email_ = new ::std::string;
  }
  return email_;
}
inline ::std::string* Tile_Avatar::release_email() {
  clear_has_email();
  if (email_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = email_;
    email_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Tile_Avatar::set_allocated_email(::std::string* email) {
  if (email_ != &::google::protobuf::internal::kEmptyString) {
    delete email_;
  }
  if (email) {
    set_has_email();
    email_ = email;
  } else {
    clear_has_email();
    email_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}


// @@protoc_insertion_point(namespace_scope)

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_Person_2eproto__INCLUDED
